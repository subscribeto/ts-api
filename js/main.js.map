{"version":3,"sources":["../ts/main.ts"],"names":["readline_1","__importDefault","require","s2_user_endpoint_1","s2_api_1","exports","S2API","s2_api_response_1","S2APIResponse","s2_endpoint_1","S2Endpoint","s2_user_endpoint_2","S2UserEndpoint","S2UserAuthenticationEndpoint","S2UserSignUpEndpoint","S2UserSignInEndpoint","main","__awaiter","this","response1","signUp","emailCode","prompt","sessionToken","finalize","getBody","token","console","log","question","Promise","resolve","reject","readlineInstance","default","createInterface","input","process","stdin","output","stdout","response","close"],"mappings":"ycAcA,MAAAA,WAAAC,gBAAAC,QAAA,aACAC,mBAAAD,QAAA,iCAIA,IAAAE,SAAAF,QAAA,YAASG,QAAAC,MAAAF,SAAAE,MACT,IAAAC,kBAAAL,QAAA,qBAASG,QAAAG,cAAAD,kBAAAC,cACT,IAAAC,cAAAP,QAAA,4BAASG,QAAAK,WAAAD,cAAAC,WAET,IAAAC,mBAAAT,QAAA,iCACCG,QAAAO,eAAAD,mBAAAC,eACAP,QAAAQ,6BAAAF,mBAAAE,6BACAR,QAAAS,qBAAAH,mBAAAG,qBACAT,QAAAU,qBAAAJ,mBAAAI,qBAGD,MAAMC,KAA4B,IAA0BC,UAAAC,UAAA,OAAA,EAAA,YAE3D,IAAIC,QAA2DhB,mBAAAW,qBAAqBM,OAAO,6BAA8B,UACrHC,QAA0BC,OAAO,4BAEjCC,SAD2DpB,mBAAAW,qBAAqBU,SAASL,EAAUM,UAAUC,MAAOL,IACnFI,UAAUC,MAE/CC,QAAQC,IAAI,kBAAoBL,KAI3BD,OAAuDO,GAAqCZ,UAAAC,UAAA,OAAA,EAAA,YAEjG,OAAO,IAAIY,QAAgB,CAACC,EAAoCC,KAE/D,IAAIC,EAAmBjC,WAAAkC,QAASC,gBAAgB,CAE/CC,MAAOC,QAAQC,MACfC,OAAQF,QAAQG,SAIjBP,EAAiBJ,SAASA,EAAWY,IAEpCV,EAAQU,GACRR,EAAiBS,cAQpB1B","file":"main.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t10:53 PM -- June 11th, 2019.\n *\tProject: @subscribeto/ts-api\n */\n\n/**\n * NPM main class used for exporting this package's contents.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\n\nimport readline from \"readline\";\nimport { S2UserSignUpEndpoint } from \"./raw-access/s2-user-endpoint\";\nimport { S2APIResponse } from \"./s2-api-response\";\nimport { S2TokenResponseStructure } from \"./interfaces/s2-token-response-structure\";\n\nexport { S2API }\t\t\tfrom \"./s2-api\";\nexport { S2APIResponse }\tfrom \"./s2-api-response\"\nexport { S2Endpoint }\t\tfrom \"./raw-access/s2-endpoint\"\n\nexport {\n\tS2UserEndpoint,\n\tS2UserAuthenticationEndpoint,\n\tS2UserSignUpEndpoint,\n\tS2UserSignInEndpoint\n} from \"./raw-access/s2-user-endpoint\";\n\nconst main: () => Promise<void> = async (): Promise<void> => {\n\t\n\tlet response1: S2APIResponse<S2TokenResponseStructure> = await S2UserSignUpEndpoint.signUp(\"trevorsears.main@gmail.com\", \"alpine\");\n\tlet emailCode: string = await prompt(\"What is the email code? \");\n\tlet response2: S2APIResponse<S2TokenResponseStructure> = await S2UserSignUpEndpoint.finalize(response1.getBody().token, emailCode);\n\tlet sessionToken: string = response2.getBody().token;\n\t\n\tconsole.log(\"Session token: \" + sessionToken);\n\t\n};\n\nconst prompt: (question: string) => Promise<string> = async (question: string): Promise<string> => {\n\t\n\treturn new Promise<string>((resolve: (response: string) => any, reject: () => any): void => {\n\t\t\n\t\tlet readlineInstance = readline.createInterface({\n\t\t\t\n\t\t\tinput: process.stdin,\n\t\t\toutput: process.stdout\n\t\t\t\n\t\t});\n\t\t\n\t\treadlineInstance.question(question, (response: string): void => {\n\t\t\t\n\t\t\tresolve(response);\n\t\t\treadlineInstance.close();\n\t\t\t\n\t\t});\n\t\n\t});\n\t\n};\n\nmain();"]}