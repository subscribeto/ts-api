{"version":3,"sources":["ts/raw-access/s2-user-endpoint.ts"],"names":["s2_api_1","require","s2_endpoint_1","S2UserEndpoint","S2Endpoint","[object Object]","append","super","getEndpointURL","exports","S2UserAuthenticationEndpoint","S2UserSignUpEndpoint","email","password","S2API","makeRequest","token","code","S2UserSignInEndpoint"],"mappings":"2WAQA,MAAAA,SAAAC,QAAA,aACAC,cAAAD,QAAA,iBASA,MAAaE,uBAAuBD,cAAAE,WAQ5BC,sBAAsBC,EAAiB,IAE7C,OAAOC,MAAMC,eAAe,UAV9BC,QAAAN,eAAAA,eAuBA,MAAaO,qCAAqCP,eAQ1CE,sBAAsBC,EAAiB,IAE7C,OAAOC,MAAMC,eAAe,UAV9BC,QAAAC,6BAAAA,6BAuBA,MAAaC,6BAA6BD,6BAQlCL,sBAAsBC,EAAiB,IAE7C,OAAOC,MAAMC,eAAe,YAiBtBH,cAAoBO,EAAeC,mDAEzC,OAAOb,SAAAc,MAAMC,YACZ,OACAJ,qBAAqBH,eAAe,KACpC,CAAEI,MAAAA,EAAOC,SAAAA,MAaJR,gBAAgBW,EAAeC,GAErC,OAAOjB,SAAAc,MAAMC,YACZ,OACAJ,qBAAqBH,eAAe,aACpC,CAAEQ,MAAAA,EAAOC,KAAAA,KAlDZR,QAAAE,qBAAAA,qBAgEA,MAAaO,6BAA6BR,6BAQlCL,sBAAsBC,EAAiB,IAE7C,OAAOC,MAAMC,eAAe,aAV9BC,QAAAS,qBAAAA","file":"s2-user-endpoint.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t4:14 PM -- July 11th, 2019.\n *\tProject: @subscribeto/ts-api\n */\n\nimport { S2APIResponse } from \"../s2-api-response\";\nimport { S2TokenResponseStructure } from \"../interfaces/s2-token-response-structure\";\nimport { S2API } from \"../s2-api\";\nimport { S2Endpoint } from \"./s2-endpoint\";\n\n/**\n * Raw accessor methods to the sub.scribe.to user endpoints.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class S2UserEndpoint extends S2Endpoint {\n\t\n\t/**\n\t * Returns the URL for this endpoint class.\n\t *\n\t * @param append The text to append to the URL before returning it.\n\t * @return The URL with text appended.\n\t */\n\tpublic static getEndpointURL(append: string = \"\"): string {\n\t\t\n\t\treturn super.getEndpointURL(\"/user\")\n\t\t\n\t}\n\n}\n\n/**\n * Raw accessor methods to the sub.scribe.to user authentication endpoints.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class S2UserAuthenticationEndpoint extends S2UserEndpoint {\n\t\n\t/**\n\t * Returns the URL for this endpoint class.\n\t *\n\t * @param append The text to append to the URL before returning it.\n\t * @return The URL with text appended.\n\t */\n\tpublic static getEndpointURL(append: string = \"\"): string {\n\t\t\n\t\treturn super.getEndpointURL(\"/auth\");\n\t\t\n\t}\n\n}\n\n/**\n * Raw accessor methods to the sub.scribe.to user sign-up endpoints.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class S2UserSignUpEndpoint extends S2UserAuthenticationEndpoint {\n\t\n\t/**\n\t * Returns the URL for this endpoint class.\n\t *\n\t * @param append The text to append to the URL before returning it.\n\t * @return The URL with text appended.\n\t */\n\tpublic static getEndpointURL(append: string = \"\"): string {\n\t\t\n\t\treturn super.getEndpointURL(\"/sign-up\");\n\t\t\n\t}\n\t\n\t/**\n\t * Sign-up for a new sub.scribe.to account.\n\t *\n\t * This endpoint will give you a token and will email the provided email address with a verification code to be used\n\t * with the {@link S2UserSignUpEndpoint#finalize} method alongside the aforementioned token in order to create a new\n\t * account with the API.\n\t *\n\t * NOTE: Ensure that you actually call the {@link S2UserSignUpEndpoint#finalize} method after calling this method!\n\t *\n\t * @param email The email with which to create a new account.\n\t * @param password The password to use as the newly created account's password.\n\t * @return A promise that resolves to a {@link S2APIResponse} with a {@link S2TokenResponseStructure} inside.\n\t */\n\tpublic static async signUp(email: string, password: string): Promise<S2APIResponse<S2TokenResponseStructure>> {\n\t\t\n\t\treturn S2API.makeRequest<S2TokenResponseStructure>(\n\t\t\t\"POST\",\n\t\t\tS2UserSignUpEndpoint.getEndpointURL(\"/\"),\n\t\t\t{ email, password }\n\t\t);\n\t\t\n\t}\n\t\n\t/**\n\t * Finalize a new sub.scribe.to account sign-up, returning a session token for the newly created account.\n\t *\n\t * @param token The token provided as the response from the required call to {@link S2UserSignUpEndpoint#signUp}.\n\t * @param code The code received via email at the email address provided in the required call to\n\t * {@link S2UserSignUpEndpoint#signUp}.\n\t * @return A promise that resolves to\n\t */\n\tpublic static finalize(token: string, code: string): Promise<S2APIResponse<S2TokenResponseStructure>> {\n\t\t\n\t\treturn S2API.makeRequest<S2TokenResponseStructure>(\n\t\t\t\"POST\",\n\t\t\tS2UserSignUpEndpoint.getEndpointURL(\"/finalize\"),\n\t\t\t{ token, code }\n\t\t);\n\t\t\n\t}\n\t\n}\n\n/**\n * Raw accessor methods to the sub.scribe.to user sign-in endpoints.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class S2UserSignInEndpoint extends S2UserAuthenticationEndpoint {\n\t\n\t/**\n\t * Returns the URL for this endpoint class.\n\t *\n\t * @param append The text to append to the URL before returning it.\n\t * @return The URL with text appended.\n\t */\n\tpublic static getEndpointURL(append: string = \"\"): string {\n\t\t\n\t\treturn super.getEndpointURL(\"/sign-in\");\n\t\t\n\t}\n\t\n\t// public static async signIn(email: string, password: string): Promise<S2APIResponse<S2TokenResponseStructure>> {\n\t//\n\t//\n\t//\n\t// }\n\t//\n\t// public static async finalizeTOTP(token: string, code: string): Promise<S2APIResponse<S2TokenResponseStructure>> {\n\t//\n\t//\n\t// }\n\t//\n\t// public static async finalizeSMS(token: string, code: string): Promise<S2APIResponse<S2TokenResponseStructure>> {\n\t//\n\t//\n\t//\n\t// }\n\t\n}"]}